{"version":3,"sources":["SortingVisualizer/colorCodes.js","algorithms/quicksort.js","algorithms/heapsort.js","utils/sound.js","SortingVisualizer/Visualizer.js","App.js","index.js"],"names":["colors","primaryColor","afterSortingColor","pivotActiveColor","sortedElementColor","cyan","orange","document","getElementsByClassName","algoOption","label","value","Visualizer","useState","mainArray","setMainArray","arrayLength","setArrayLength","animationSpeed","setAnimationSpeed","frequency","setFrequency","sound","setSound","algo","setAlgo","able","options","setOptions","queue","worker","didIt","i","j","then","performance","now","audio","AudioContext","master","createGain","gain","setValueAtTime","currentTime","connect","destination","track","tone","createOscillator","type","start","useEffect","populateArray","items","length","style","pointerEvents","disabled","window","requestAnimationFrame","tick","arrayBars","delay","parseInt","innerHTML","fre","tmpLength","event","shift","console","log","backgroundColor","linearRampToValueAtTime","cancelScheduledValues","temp","height","size","tempArr","tmp","push","sort","a","b","Math","random","item","idx","val","Box","fill","className","direction","border","color","Grid","rows","columns","gap","areas","width","align","Text","Select","placeholder","labelKey","valueKey","onChange","option","onClose","onSearch","text","escapedText","replace","exp","RegExp","filter","o","test","pad","FormField","TextInput","target","Button","primary","icon","CirclePlay","onClick","terminate","resume","Worker","onmessage","e","data","postMessage","startSorting","Refresh","RangeInput","min","max","step","gridArea","display","map","key","App","Grommet","full","theme","grommet","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8b5927c7.chunk.js","sourcesContent":["const colors = {\r\n\tprimaryColor: '#00b0ff',\r\n\tafterSortingColor: '#00587a',\r\n\tpivotActiveColor: '#ff2400',\r\n\tsortedElementColor: '#4cbb17',\r\n\tcyan: '#40E0D0',\r\n\torange: '#FFA500',\r\n};\r\n\r\nexport default colors;\r\n","import colors from '../SortingVisualizer/colorCodes';\r\nimport { swap } from './swap';\r\n\r\nconst arrayBars = document.getElementsByClassName('arrayBar');\r\nlet count = 0;\r\n\r\nexport const quicksort = (tempArr, animationSpeed) => {\r\n\tconst arr = tempArr.map(item => item.val);\r\n\tcount = 0;\r\n\tlet low = 0;\r\n\tlet high = arr.length - 1;\r\n\r\n\t// main quicksort function\r\n\tquicksortHelper(arr, low, high, animationSpeed);\r\n\tcount += 2;\r\n\treturn { arr, count };\r\n};\r\n\r\nconst quicksortHelper = (arr, low, high, speed) => {\r\n\tif (low > high) return;\r\n\r\n\tlet pivot = partition(arr, low, high, speed);\r\n\r\n\t// Colors the element which is in its correct place\r\n\tsetTimeout(() => {\r\n\t\tarrayBars[pivot].style.backgroundColor = colors.sortedElementColor;\r\n\t}, count * speed);\r\n\tcount++;\r\n\r\n\tquicksortHelper(arr, low, pivot - 1, speed);\r\n\tquicksortHelper(arr, pivot + 1, high, speed);\r\n};\r\n\r\nconst partition = (arr, low, high, speed) => {\r\n\tlet pivotElement = arr[high];\r\n\r\n\t// Colors the current pivot index\r\n\tsetTimeout(() => {\r\n\t\tarrayBars[high].style.backgroundColor = colors.pivotActiveColor;\r\n\t}, count * speed);\r\n\tcount++;\r\n\r\n\tlet i = low;\r\n\tfor (let j = low; j < high; j++) {\r\n\t\t// animate the curr traversing element\r\n\t\tsetTimeout(() => {\r\n\t\t\tarrayBars[j].style.backgroundColor = colors.cyan;\r\n\t\t}, count * speed);\r\n\t\tcount += 2;\r\n\r\n\t\t// color primary to the curr traversing element\r\n\t\tsetTimeout(() => {\r\n\t\t\tarrayBars[j].style.backgroundColor = colors.primaryColor;\r\n\t\t}, count * speed);\r\n\t\tcount++;\r\n\r\n\t\tif (pivotElement > arr[j]) {\r\n\t\t\tlet tempI = i;\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tarrayBars[tempI].style.backgroundColor = colors.orange;\r\n\r\n\t\t\t\tlet temp = arrayBars[tempI].style.height;\r\n\t\t\t\tarrayBars[tempI].style.height = arrayBars[j].style.height;\r\n\t\t\t\tarrayBars[j].style.height = temp;\r\n\t\t\t}, count * speed);\r\n\t\t\tcount++;\r\n\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tarrayBars[tempI].style.backgroundColor = colors.primaryColor;\r\n\t\t\t}, (count + 1) * speed);\r\n\t\t\tcount++;\r\n\r\n\t\t\tswap(i, j, arr);\r\n\t\t\ti++;\r\n\t\t}\r\n\t}\r\n\r\n\t// resets the color of pivot element to primary\r\n\tsetTimeout(() => {\r\n\t\tarrayBars[high].style.backgroundColor = colors.primaryColor;\r\n\t}, count * speed);\r\n\tcount++;\r\n\r\n\tsetTimeout(() => {\r\n\t\tlet temp = arrayBars[i].style.height;\r\n\t\tarrayBars[i].style.height = arrayBars[high].style.height;\r\n\t\tarrayBars[high].style.height = temp;\r\n\t}, count * speed);\r\n\tcount++;\r\n\r\n\tswap(i, high, arr);\r\n\treturn i;\r\n};\r\n","import { swap } from './swap';\r\nimport colors from '../SortingVisualizer/colorCodes';\r\n\r\nlet count = 0;\r\n\r\nconst arrayBars = document.getElementsByClassName('arrayBar');\r\n\r\nexport const heapsort = (tempArr, speed) => {\r\n\tcount = 0;\r\n\tconst arr = tempArr.map(item => item.val);\r\n\tsort(arr, arr.length, speed);\r\n\treturn { arr, count };\r\n};\r\n\r\nconst setColor = (speed, color, i, j) => {\r\n\tif (i) {\r\n\t\tsetTimeout(() => {\r\n\t\t\tarrayBars[i].style.backgroundColor = color;\r\n\t\t}, count * speed);\r\n\t}\r\n\r\n\tif (j) {\r\n\t\tsetTimeout(() => {\r\n\t\t\tarrayBars[j].style.backgroundColor = color;\r\n\t\t}, count * speed);\r\n\t}\r\n\tcount++;\r\n};\r\nconst swapHeights = (speed, color, i, j) => {\r\n\tsetTimeout(() => {\r\n\t\tarrayBars[i].style.backgroundColor = color;\r\n\t\tarrayBars[j].style.backgroundColor = color;\r\n\r\n\t\tlet temp = arrayBars[i].style.height;\r\n\t\tarrayBars[i].style.height = arrayBars[j].style.height;\r\n\t\tarrayBars[j].style.height = temp;\r\n\t}, count * speed);\r\n\r\n\tcount++;\r\n};\r\n// heapify\r\nconst heapify = (arr, i, n, speed) => {\r\n\tlet largest = i;\r\n\tlet leftChild = i * 2 + 1;\r\n\tlet rightChild = i * 2 + 2;\r\n\r\n\tif (leftChild < n && arr[leftChild] > arr[largest]) largest = leftChild;\r\n\r\n\tif (rightChild < n && arr[rightChild] > arr[largest]) largest = rightChild;\r\n\r\n\tif (largest !== i) {\r\n\t\tswap(i, largest, arr);\r\n\r\n\t\t// color\r\n\t\tswapHeights(speed, colors.pivotActiveColor, i, largest);\r\n\t\tsetColor(speed, colors.primaryColor, i, largest);\r\n\t\theapify(arr, largest, n, speed);\r\n\t}\r\n};\r\n\r\n// sort\r\nconst sort = (arr, n, speed) => {\r\n\t// arrange the array\r\n\tfor (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\r\n\t\theapify(arr, i, n, speed);\r\n\t}\r\n\r\n\tcount += 3;\r\n\t// one by one extract the element from heap\r\n\t// and put them at back\r\n\tfor (let i = n - 1; i >= 0; i--) {\r\n\t\tswap(i, 0, arr);\r\n\t\tswapHeights(speed, colors.orange, i, 0);\r\n\t\tcount += 2;\r\n\r\n\t\tsetColor(speed, colors.sortedElementColor, i);\r\n\t\theapify(arr, 0, i, speed);\r\n\t}\r\n};\r\n","\r\nexport const sound_test = (tone, track,value1,value2,size,audio,delay) => {\r\n\tvar factor = ((value1 / size) + (value2 / size) / 2);\r\n    var frequency = 2000 + (factor * 2000);\r\n\r\n    tone.frequency.linearRampToValueAtTime(frequency, audio.currentTime);\r\n\r\n    track.gain.cancelScheduledValues(audio.currentTime);\r\n    track.gain.linearRampToValueAtTime(0.75, audio.currentTime);\r\n    track.gain.linearRampToValueAtTime(0, audio.currentTime + delay/1000);\r\n};\r\n\r\n\r\nexport const sound_swap = (tone, track,value1,value2,size,audio,delay) => {\r\n    var factor = ((value1 / size) + (value2 / size) / 2);\r\n    var frequency = 2000 - (factor * 2000);\r\n\r\n    tone.frequency.linearRampToValueAtTime(frequency, audio.currentTime);\r\n\r\n    track.gain.cancelScheduledValues(audio.currentTime);\r\n    track.gain.linearRampToValueAtTime(1, audio.currentTime);\r\n    track.gain.linearRampToValueAtTime(0, audio.currentTime + delay/1000);\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport colors from './colorCodes';\r\nimport GithubIcon from '../Icons/GithubIcon';\r\nimport { mergeSortAnimation } from '../algorithms/mergesort';\r\nimport { insertionSort } from '../algorithms/insertion';\r\nimport { selectionSort } from '../algorithms/selectionsort';\r\nimport { bubbleSort } from '../algorithms/bubblesort';\r\nimport { quicksort } from '../algorithms/quicksort';\r\nimport { heapsort } from '../algorithms/heapsort';\r\n// stylesheet\r\nimport './SortingVisualizer.css';\r\nimport { RangeInput, Box, Button, Grid, Text, Select, FormField, TextInput } from 'grommet';\r\nimport { Refresh, CirclePlay } from 'grommet-icons';\r\nimport {startAlgo} from './worker'\r\nconst algoOption = [\r\n\t{ label: 'Bubble Sort', value: \"bubbleSort\" },\r\n\t{ label: 'Merge Sort', value: \"mergeSort\" },\r\n\t{ label: 'Insertion Sort', value: \"insertionSort\" },\r\n\t{ label: 'Selection Sort', value: \"selectionSort\" },\r\n\t{ label: 'Quick Sort', value: \"quickSort\" },\r\n\t{ label: 'Heap Sort', value: \"heapSort\" },\r\n  ];\r\nconst Visualizer = () => {\r\n\t// state of the array\r\n\tconst [mainArray, setMainArray] = useState([]);\r\n\tconst [arrayLength, setArrayLength] = useState(20);\r\n\tconst [animationSpeed, setAnimationSpeed] = useState(100);\r\n\tconst [frequency, setFrequency] = useState(100);\r\n\tconst [sound, setSound] = useState(10);\r\n\tconst [algo, setAlgo] = useState('mergesort');\r\n\tconst [able, setAble] = useState(true);\r\n\tconst [options, setOptions] = useState(algoOption);\r\n\tvar queue = null;\r\n\tvar worker = null;\r\n\tvar didIt=false;\r\n\tvar i=0;\r\n\tvar j=0;\r\n\tvar then = performance.now();\r\n\r\n\tconst audio = new AudioContext();\r\n\tvar master = audio.createGain();\r\n\tmaster.gain.setValueAtTime(0.20, audio.currentTime);\r\n\tmaster.connect(audio.destination);\r\n\tvar track = audio.createGain();\r\n\ttrack.gain.setValueAtTime(0, audio.currentTime);\r\n\ttrack.connect(master);\r\n\r\n\tvar tone = audio.createOscillator();\r\n\r\n\ttone.type = 'sine';\r\n\ttone.frequency.value = 440;\r\n\ttone.connect(track);\r\n\ttone.start();\r\n\r\n\t//Render the Array Before DOM loades\r\n\tuseEffect(() => {\r\n\t\tif (able) populateArray(arrayLength);\r\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\r\n\t}, [arrayLength, algo]);\r\n\r\n\t// ABLE / DISABLE BUTTONS ETC.\r\n\tuseEffect(() => {\r\n\t\tconst items = document.getElementsByClassName('able');\r\n\r\n\t\tif (!able) {\r\n\t\t\tfor (let i = 0; i < items.length; i++) {\r\n\t\t\t\titems[i].style.pointerEvents = 'none';\r\n\t\t\t\titems[i].disabled = true;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tfor (let i = 0; i < items.length; i++) {\r\n\t\t\t\titems[i].style.pointerEvents = 'auto';\r\n\t\t\t\titems[i].disabled = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}, [able]);\r\n\r\n\tuseEffect(() => {\r\n\t\twindow.requestAnimationFrame(function tick(now) {\r\n\t\t\tconst arrayBars = document.getElementsByClassName('arrayBar');\r\n\t\t\tconst delay=parseInt(document.getElementsByClassName('SpeedAnimation')[0].innerHTML);\r\n\t\t\tconst fre=parseInt(document.getElementsByClassName('Frequency')[0].innerHTML);\r\n\t\t\tconst sound=parseInt(document.getElementsByClassName('Sound')[0].innerHTML);\r\n\t\t\tmaster.gain.setValueAtTime(sound / 100, audio.currentTime);\r\n\t\t\tconst tmpLength=arrayLength;\r\n\t\t\tif (now - then > delay) {\r\n\t\t\t\tif(didIt==false){\r\n\t\t\t\t\tvar event = (queue || []).shift();\r\n\t\t\t\t\tif (event) {\r\n\t\t\t\t\t\tconsole.log(event);\r\n\t\t\t\t\t\ti=event[1]\r\n\t\t\t\t\t\tj=event[2]\r\n\t\t\t\t\t\tif (event[0] == 'test') {\r\n\t\t\t\t\t\t\tarrayBars[i].style.backgroundColor = colors.cyan;\r\n\t\t\t\t\t\t\tarrayBars[j].style.backgroundColor = colors.cyan;\r\n\r\n\t\t\t\t\t\t\tvar factor = ((event[3] / tmpLength) + (event[4] /tmpLength) / 2);\r\n\t\t\t\t\t\t\tvar frequency = fre + (factor * fre);\r\n\r\n\t\t\t\t\t\t\ttone.frequency.linearRampToValueAtTime(frequency, audio.currentTime);\r\n\r\n\t\t\t\t\t\t\ttrack.gain.cancelScheduledValues(audio.currentTime);\r\n\t\t\t\t\t\t\ttrack.gain.linearRampToValueAtTime(0.75, audio.currentTime);\r\n\t\t\t\t\t\t\ttrack.gain.linearRampToValueAtTime(0, audio.currentTime + delay);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (event[0] == 'swap') {\r\n\t\t\t\t\t\t\tarrayBars[i].style.backgroundColor = colors.pivotActiveColor;\r\n\t\t\t\t\t\t\tarrayBars[j].style.backgroundColor = colors.pivotActiveColor;\r\n\t\t\t\t\t\t\tlet temp = arrayBars[j].style.height;\r\n\t\t\t\t\t\t\tarrayBars[j].style.height = arrayBars[i].style.height;\r\n\t\t\t\t\t\t\tarrayBars[i].style.height = temp;\r\n\t\t\t\t\t\t\tif (arrayLength<29){\r\n\t\t\t\t\t\t\t\tlet temp = arrayBars[j].innerHTML;\r\n\t\t\t\t\t\t\t\tarrayBars[j].innerHTML = arrayBars[i].innerHTML;\r\n\t\t\t\t\t\t\t\tarrayBars[i].innerHTML = temp;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tvar factor = ((event[3] / tmpLength) + (event[4] /tmpLength) / 2);\r\n\t\t\t\t\t\t\tvar frequency = fre - (factor * fre);\r\n\r\n\t\t\t\t\t\t\ttone.frequency.linearRampToValueAtTime(frequency, audio.currentTime);\r\n\r\n\t\t\t\t\t\t\ttrack.gain.cancelScheduledValues(audio.currentTime);\r\n\t\t\t\t\t\t\ttrack.gain.linearRampToValueAtTime(1, audio.currentTime);\r\n\t\t\t\t\t\t\ttrack.gain.linearRampToValueAtTime(0, audio.currentTime + delay);\r\n\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// arrayBars[i].style.backgroundColor = colors.primaryColor;\r\n\t\t\t\t\t\t// arrayBars[j].style.backgroundColor = colors.primaryColor;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttrack.gain.cancelScheduledValues(0);\r\n\t\t\t\t\t\ttrack.gain.linearRampToValueAtTime(0, audio.currentTime);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tarrayBars[i].style.backgroundColor = colors.primaryColor;\r\n\t\t\t\t\tarrayBars[j].style.backgroundColor = colors.primaryColor;\r\n\t\t\t\t}\r\n\t\t\t\tdidIt=!didIt;\r\n\t\t\t\tthen = now;\r\n\t\t\t}\r\n\t\t\twindow.requestAnimationFrame(tick);\r\n\r\n\t\t})\r\n\t});\r\n\r\n\tconst populateArray = size => {\r\n\t\tvar myDiv = document.getElementsByClassName(\"visualizeContainer\");\r\n    \tmyDiv.innerHTML = \"\";//remove all child elements inside of myDiv\r\n\t\tconst tempArr = [];\r\n\t\tvar tmp = [];\r\n\t\tsize=parseInt(size)\r\n\t\tfor (let i = 1; i < (size + 1); i++) {\r\n\t\t\ttmp.push(i);\r\n\t\t}\r\n\t\ttmp.sort(function (a, b) {\r\n\t\t\treturn Math.random() > 0.5 ? -1 : 1;\r\n\t\t});\r\n \t\tfor (let i = 0; i < tmp.length; i++) {\r\n\t\t\tconst item = {\r\n\t\t\t\tidx: i,\r\n\t\t\t\tval: tmp[i],\r\n\t\t\t};\r\n\t\t\ttempArr.push(item);\r\n\t\t\tif (document.getElementsByClassName('arrayBar')[i] != null) {\r\n\t\t\t\tdocument.getElementsByClassName('arrayBar')[i].style.backgroundColor =\r\n\t\t\t\t\tcolors.primaryColor;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (able) setMainArray(tempArr);\r\n\t};\r\n\r\n\t// colors every elements afte sorting\r\n\tconst colorEveryElement = (arr, counter) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tconst sortedArray = [];\r\n\t\t\tfor (let i = 0; i < arr.length; i++) {\r\n\t\t\t\tdocument.getElementsByClassName('arrayBar')[i].style.backgroundColor =\r\n\t\t\t\t\tcolors.afterSortingColor;\r\n\r\n\t\t\t\tsortedArray.push({\r\n\t\t\t\t\tidx: i,\r\n\t\t\t\t\tval: arr[i],\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tsetMainArray(sortedArray);\r\n\t\t\tsetAble(true);\r\n\t\t}, counter * animationSpeed);\r\n\t};\r\n\r\n\tconst startSorting = algo => {\r\n\t\tif (worker) {\r\n\t\t\tworker.terminate();\r\n\t\t  }\r\n\t\t  \r\n\t\t// https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio\r\n\t\tif (audio.resume) {\r\n\t\t\taudio.resume();\r\n\t\t}\r\n\t\tworker = new window.Worker(\"./sort-worker.js\");\r\n\t\tqueue=[];\r\n\t\tworker.onmessage = (e) => {\r\n\t\t\tqueue.push(e.data);\r\n\t\t};\r\n\t\tworker.postMessage([algo.value,mainArray]);\r\n\r\n\t\t// switch (algo) {\r\n\t\t// \tcase 'bubble sort':\r\n\t\t// \t\tbubbleSortAnimate();\r\n\t\t// \t\tbreak;\r\n\r\n\t\t// \tcase 'merge sort':\r\n\t\t// \t\tmergeSort();\r\n\t\t// \t\tbreak;\r\n\r\n\t\t// \tcase 'selection sort':\r\n\t\t// \t\tselectionSortAnimate();\r\n\t\t// \t\tbreak;\r\n\r\n\t\t// \tcase 'insertion sort':\r\n\t\t// \t\tinsertionSortAnimate();\r\n\t\t// \t\tbreak;\r\n\t\t// \tcase 'quick sort':\r\n\t\t// \t\tquicksortAnimate();\r\n\t\t// \t\tbreak;\r\n\t\t// \tcase 'heap sort':\r\n\t\t// \t\theapsortAnimate();\r\n\t\t// \t\tbreak;\r\n\t\t// \tdefault:\r\n\t\t// \t\tmergeSort();\r\n\t\t// \t\tbreak;\r\n\t\t// }\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Box\r\n\t\t\tfill=\"vertical\"\r\n\t\t\tclassName=\"myContainer\"\r\n\t\t\tdirection=\"row\"\r\n\t\t\tborder={{ color: '#00b0ff', size: 'large' }}\r\n\t\t>\r\n\t\t\t<Grid\r\n\t\t\t\tclassName=\"myContainer\"\r\n\t\t\t\trows={['flex']}\r\n\t\t\t\tcolumns={['1/4', '3/4']}\r\n\t\t\t\tgap=\"small\"\r\n\t\t\t\tareas={[\r\n\t\t\t\t\t['sidebar', 'main'],\r\n\t\t\t\t]}\r\n\t\t\t\tstyle={{width:\"100%\"}}\r\n\t\t\t>\r\n\t\t\t\t<Box direction=\"column\" align=\"center\" gap=\"medium\" fill=\"vertical\">\r\n\t\t\t\t\t<Box align=\"center\">\r\n\t\t\t\t\t\t<Text>Sorting Algorithm</Text>\r\n\t\t\t\t\t\t<Text>Visualizer</Text>\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t\t<Box >\r\n\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\tsize=\"medium\"\r\n\t\t\t\t\t\t\tplaceholder=\"Select Sorting Algorithm\"\r\n\t\t\t\t\t\t\tvalue={algo}\r\n\t\t\t\t\t\t\toptions={options}\r\n\t\t\t\t\t\t\tlabelKey=\"label\"\r\n\t\t\t\t\t\t\tvalueKey=\"value\"\r\n\t\t\t\t\t\t\tonChange={({ option }) => setAlgo(option)}\r\n\t\t\t\t\t\t\tonClose={() => setOptions(algoOption)}\r\n\t\t\t\t\t\t\tonSearch={text => {\r\n\t\t\t\t\t\t\t\t// The line below escapes regular expression special characters:\r\n\t\t\t\t\t\t\t\t// [ \\ ^ $ . | ? * + ( )\r\n\t\t\t\t\t\t\t\tconst escapedText = text.replace(/[-\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\r\n\r\n\t\t\t\t\t\t\t\t// Create the regular expression with modified value which\r\n\t\t\t\t\t\t\t\t// handles escaping special characters. Without escaping special\r\n\t\t\t\t\t\t\t\t// characters, errors will appear in the console\r\n\t\t\t\t\t\t\t\tconst exp = new RegExp(escapedText, 'i');\r\n\t\t\t\t\t\t\t\tsetOptions(algoOption.filter(o => exp.test(o)));\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t{/* <Select\r\n\t\t\t\t\t\toptions={algoList}\r\n\t\t\t\t\t\tvalue={algo}\r\n\t\t\t\t\t\tonChange={({ option }) => setAlgo(option)}\r\n\t\t\t\t\t\t/> */}\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t\t<Box pad=\"medium\">\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t<FormField label={<Text size='medium' color='black'> Number of elements</Text>} style={{color: \"#1976D2\"}}>\r\n\t\t\t\t\t\t\t<TextInput placeholder=\"default is 10\" onChange={event => {setArrayLength(event.target.value)}} />\r\n\t\t\t\t\t\t</FormField>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tcolor=\"light-2\"\r\n\t\t\t\t\t\t\tprimary\r\n\t\t\t\t\t\t\ticon={<CirclePlay />}\r\n\t\t\t\t\t\t\tlabel=\"Play\"\r\n\t\t\t\t\t\t\tonClick={() => startSorting(algo)}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tcolor=\"light-2\"\r\n\t\t\t\t\t\t\tprimary\r\n\t\t\t\t\t\t\ticon={<Refresh />}\r\n\t\t\t\t\t\t\tlabel=\"Reset\"\r\n\t\t\t\t\t\t\tonClick={() => { }}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<Text size=\"small\">Speed:<span className=\"SpeedAnimation\">{`${animationSpeed}`}</span></Text>\r\n\t\t\t\t\t\t<RangeInput\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tmin={1}\r\n\t\t\t\t\t\t\tmax={200}\r\n\t\t\t\t\t\t\tstep={10}\r\n\t\t\t\t\t\t\tvalue={animationSpeed}\r\n\t\t\t\t\t\t\tonChange={event => setAnimationSpeed(parseInt(event.target.value, 10))}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<Text size=\"small\">Frequency: <span className=\"Frequency\">{`${frequency}`}</span></Text>\r\n\t\t\t\t\t\t<RangeInput\r\n\t\t\t\t\t\t\tmin={100}\r\n\t\t\t\t\t\t\tmax={1500}\r\n\t\t\t\t\t\t\tstep={50}\r\n\t\t\t\t\t\t\tvalue={frequency}\r\n\t\t\t\t\t\t\tonChange={event => setFrequency(parseInt(event.target.value, 10))}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<Text size=\"small\">Sound: <span className=\"Sound\">{`${sound}`}</span></Text>\r\n\t\t\t\t\t\t<RangeInput\r\n\t\t\t\t\t\t\tmin={10}\r\n\t\t\t\t\t\t\tmax={510}\r\n\t\t\t\t\t\t\tstep={50}\r\n\t\t\t\t\t\t\tvalue={sound}\r\n\t\t\t\t\t\t\tonChange={event => {setSound(parseInt(event.target.value, 10))}}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Box>\r\n\r\n\t\t\t\t</Box>\r\n\r\n\t\t\t\t<Box gridArea=\"main\" fill=\"vertical\" style={{ width: '100%', height: '100%',display:'flex' }}>\r\n\t\t\t\t\t<div className='visualizeContainer'>\r\n\t\t\t\t\t\t{mainArray.map(item => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\t\tclassName='arrayBar'\r\n\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\theight: `${item.val*100/mainArray.length}%`,\r\n\t\t\t\t\t\t\t\t\t\tbackgroundColor: colors.primaryColor,\r\n\t\t\t\t\t\t\t\t\t\twidth: `${100/mainArray.length}%`,\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\tkey={item.idx}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t{arrayLength < 29 && able && <span>{item.val}</span>}\r\n\t\t\t\t\t\t\t\t\t{/* { able && <span>{item.val}</span>} */}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Box>\r\n\r\n\t\t\t</Grid>\r\n\t\t</Box>\r\n\r\n\t\t// <div className='container'>\r\n\t\t// <div className='visualizeContainer'>\r\n\t\t// \t{mainArray.map(item => {\r\n\t\t// \t\treturn (\r\n\t\t// \t\t\t<div\r\n\t\t// \t\t\t\tclassName='arrayBar'\r\n\t\t// \t\t\t\tstyle={{\r\n\t\t// \t\t\t\t\theight: `${item.val}px`,\r\n\t\t// \t\t\t\t\tbackgroundColor: colors.primaryColor,\r\n\t\t// \t\t\t\t}}\r\n\t\t// \t\t\t\tkey={item.idx}\r\n\t\t// \t\t\t>\r\n\t\t// \t\t\t\t{arrayLength < 29 && able && <span>{item.val}</span>}\r\n\t\t// \t\t\t</div>\r\n\t\t// \t\t);\r\n\t\t// \t})}\r\n\t\t// </div>\r\n\t\t// \t<div className='sidebar'>\r\n\t\t// \t\t<header>\r\n\t\t// \t\t\tSorting Algorithm <br /> Visualizer\r\n\t\t// \t\t</header>\r\n\t\t// \t\t<div className='select-box able'>\r\n\t\t// \t\t\t<label htmlFor='algo'>select algorithm</label>\r\n\t\t// \t\t\t<select\r\n\t\t// \t\t\t\tname='algo'\r\n\t\t// \t\t\t\tid='select'\r\n\t\t// \t\t\t\tvalue={algo}\r\n\t\t// \t\t\t\tonChange={e => setAlgo(e.target.value)}\r\n\t\t// \t\t\t>\r\n\t\t// \t\t\t\t<option value='bubblesort'>bubble sort</option>\r\n\t\t// \t\t\t\t<option value='mergesort'>merge sort</option>\r\n\t\t// \t\t\t\t<option value='insertionsort'>insertion sort</option>\r\n\t\t// \t\t\t\t<option value='selectionsort'>selection sort</option>\r\n\t\t// \t\t\t\t<option value='quicksort'>quick sort</option>\r\n\t\t// \t\t\t\t<option value='heapsort'>heap sort</option>\r\n\t\t// \t\t\t</select>\r\n\t\t// \t\t</div>\r\n\t\t// \t\t<button className='button able' onClick={() => startSorting(algo)}>\r\n\t\t// \t\t\tSort\r\n\t\t// \t\t</button>\r\n\r\n\t\t// \t\t<button\r\n\t\t// \t\t\tonClick={() => populateArray(arrayLength)}\r\n\t\t// \t\t\tclassName='new-arr-btn button able'\r\n\t\t// \t\t>\r\n\t\t// \t\t\tReset\r\n\t\t// \t\t</button>\r\n\r\n\t\t// \t\t<div className='slider-container'>\r\n\t\t// \t\t\t<label>Length of Array</label>\r\n\t\t// \t\t\t<input\r\n\t\t// \t\t\t\tclassName='input-range able'\r\n\t\t// \t\t\t\ttype='range'\r\n\t\t// \t\t\t\tvalue={arrayLength}\r\n\t\t// \t\t\t\tonChange={e => setArrayLength(e.target.value)}\r\n\t\t// \t\t\t\tmin='7'\r\n\t\t// \t\t\t\tmax='150'\r\n\t\t// \t\t\t/>\r\n\t\t// \t\t</div>\r\n\t\t// \t\t<div className='slider-container'>\r\n\t\t// \t\t\t<label>Speed</label>\r\n\t\t// \t\t\t<input\r\n\t\t// \t\t\t\tclassName='input-range able'\r\n\t\t// \t\t\t\ttype='range'\r\n\t\t// \t\t\t\tvalue={500 - animationSpeed}\r\n\t\t// \t\t\t\tonChange={e => setAnimationSpeed(500 - e.target.value)}\r\n\t\t// \t\t\t\tmin='350'\r\n\t\t// \t\t\t\tmax='499'\r\n\t\t// \t\t\t/>\r\n\t\t// \t\t</div>\r\n\r\n\t\t// \t\t<GithubIcon className={'github-icon'} />\r\n\t\t// \t</div>\r\n\t\t// </div>\r\n\t);\r\n};\r\n\r\nexport default Visualizer;\r\n","import React from 'react';\r\nimport Visualizer from './SortingVisualizer/Visualizer';\r\nimport { Grommet } from 'grommet';\r\nimport './App.css';\r\nimport { grommet } from 'grommet/themes';\r\n\r\nconst theme = {\r\n\tglobal: {\r\n\t  font: {\r\n\t\tfamily: 'Roboto',\r\n\t\tsize: '18px',\r\n\t\theight: '20px',\r\n\t  },\r\n\t},\r\n  };\r\nfunction App() {\r\n\treturn (\r\n\t\t<Grommet full theme={grommet} >\r\n\t\t\t<Visualizer />\r\n\t\t</Grommet>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<App />\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root')\r\n);\r\n"],"sourceRoot":""}